/**
 * Memory operations library.
 */ 
class Memory {
    static Array ram;
    static Array heap;
    static Array freeList;

    //static int heapTop = 2048;
    //static int heapBottom = 16384;
    
    /** Initializes memory parameters. */
    function void init() {
        let ram = 0;
        
        // set heap and free list to 2048 (heap top)
        let heap = 2048;
        let freeList = 2048;
        
        // initial values
        let freeList[0] = 0;  // no next block at start
        let freeList[1] = 14335; // initial block length, 16384 - 2048 - 1
        
        return;
    }

    /** Returns the value of the main memory at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the value of the main memory at this address
     *  to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** finds and allocates from the heap a memory block of the 
     *  specified size and returns a reference to its base address. */
    function int alloc(int size) {
        var int curr, next, len, flag;
        let curr = freeList;
        let flag = 0;

        // iterate through all blocks
        while(flag < 2){
            while (~(curr = 0))
            {
                // next free block
                let next = ram[curr];

                // length of current block
                let len = ram[curr + 1];

                // check if current block is large enough
                if (~(len < size + 1)) // len >= size + 1
                {
                    // the block is large enough, use it (first fit) 

                    // update length of old block
                    let ram[curr + 1] = len - size - 1;

                    // start of the new segment
                    let curr = curr + len - size + 1;

                    // set the new size
                    let ram[curr] = size;

                    // return 
                    return curr + 1;
                }                
                let curr = next;
            }
            let flag = flag + 1;
            //if(flag = 1){
            //    do Memory.defrag();
            //}
        }
        //do Output.printString("Alociranje");
        return freeList;
    }    
    
    /** De-allocates the given object and frees its space. */
    function void deAlloc(int object) {
        var Array o;
        var int size, curr;
        
        let o = object;
        
        // go back one place
        let curr = o - 1;
        
        // read block size
        let size = ram[curr];
        
        // set next free block
        let ram[curr] = freeList;
        
        // set the size of the newly freed block
        let ram[curr + 1] = size - 1;
        
        // move pointer 
        let freeList = curr;

        //do Output.printString("Dealociranje");
        return;
    }

    function void memcpy(int source, int destination, int d){
        var int i, size;
        let i = 0;
        while(i<d){
            let ram[destination + i] = ram[source + i]; //use peek or poke?
            let i = i + 1;
        }
        do Output.printString("copying");
        return;
    }

    function void printData(int freeReg, int accumSize, int size, int i){
        do Screen.clearScreen();
        do Output.printString("freeReg: ");
        do Output.printInt(freeReg);
        do Output.println();
        do Output.printString("accumSize: ");
        do Output.printInt(accumSize);
        do Output.println();
        do Output.printString("size: ");
        do Output.printInt(size);
        do Output.println();
        do Output.printString("i: ");
        do Output.printInt(i);
        do Output.println();
        return;
    }

    function void defrag(){
        var int size, i, freeReg, accumSize, emptySpaces;
        let i = heap;
        let freeReg = freeList;
        let accumSize = 0;
        let emptySpaces = 0;
        do Memory.printData(freeReg, accumSize, emptySpaces, i);
        while(i < 16384){
            if((~(ram[i] = null)) & (freeReg < i)){
                let size = ram[i+1] + 2;
                do Memory.memcpy(i, freeReg, size);  
                let freeReg = freeReg + size + emptySpaces;
                let i = freeReg;
                let accumSize = accumSize + size;
                let emptySpaces = 0;
                //do Output.printString("zauzece");
            }
            else{
                let i = i + 1;
                let emptySpaces = emptySpaces + 1;
            }
            do Memory.printData(freeReg, accumSize, size, i);
        }
        let freeList = freeReg;
        let freeList[0] = 0;
        let freeList[1] = 14335 - accumSize;
        //do Output.printString("Defragmentacija");
        return;
    }
}















